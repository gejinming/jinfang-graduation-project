<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jinfang.graduationproject.mapper.GpCheckTeacherMapper">

    <resultMap id="BaseResultMap" type="com.jinfang.graduationproject.domain.GpCheckTeacher">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="defense_teacher_id" jdbcType="BIGINT" property="defenseTeacherId"/>
        <result column="student_id" jdbcType="BIGINT" property="studentId"/>
        <result column="edu_class_id" jdbcType="BIGINT" property="eduClassId"/>
        <result column="operate_user" jdbcType="VARCHAR" property="operateUser"/>
        <result column="create_date" jdbcType="TIMESTAMP" property="createDate"/>
        <result column="modify_date" jdbcType="TIMESTAMP" property="modifyDate"/>
        <result column="is_del" jdbcType="INTEGER" property="isDel"/>
    </resultMap>

    <resultMap id="CheckerBaseResultMap" type="com.jinfang.graduationproject.vo.teacher.checker.CheckerStudentRespVo">
        <result column="subject_id" jdbcType="BIGINT" property="subjectId"/>
        <result column="subject_name" jdbcType="VARCHAR" property="subjectName"/>
        <result column="student_id" jdbcType="BIGINT" property="studentId"/>
        <result column="student_no" jdbcType="VARCHAR" property="studentNo"/>
        <result column="edu_class_id" jdbcType="BIGINT" property="eduClassId"/>
        <result column="student_name" jdbcType="VARCHAR" property="studentName"/>
        <result column="class_name" jdbcType="VARCHAR" property="className"/>
        <result column="teacher_id" jdbcType="BIGINT" property="teacherId"/>
        <result column="teacher_name" jdbcType="VARCHAR" property="teacherName"/>
    </resultMap>

    <insert id="add" parameterType="com.jinfang.graduationproject.domain.GpCheckTeacher">
        insert into gp_check_teacher
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="defenseTeacherId != null">
                defense_teacher_id,
            </if>
            <if test="studentId != null">
                student_id,
            </if>
            <if test="eduClassId != null">
                edu_class_id,
            </if>
            <if test="operateUser != null">
                operate_user,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="modifyDate != null">
                modify_date,
            </if>
            <if test="isDel != null">
                is_del,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="defenseTeacherId != null">
                #{defenseTeacherId,jdbcType=BIGINT},
            </if>
            <if test="studentId != null">
                #{studentId,jdbcType=BIGINT},
            </if>
            <if test="eduClassId != null">
                #{eduClassId,jdbcType=BIGINT},
            </if>
            <if test="operateUser != null">
                #{operateUser,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyDate != null">
                #{modifyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isDel != null">
                #{isDel,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <delete id="delete" parameterType="java.lang.Long">
        delete
        from gp_check_teacher
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <delete id="deleteByTeacherIdAndStudentId">
        delete
        from gp_check_teacher
        where defense_teacher_id = #{defenseTeacherId}
          and student_id = #{studentId}
    </delete>

    <update id="update" parameterType="com.jinfang.graduationproject.domain.GpCheckTeacher">
        update gp_check_teacher
        <set>
            <if test="id != null">
                id = #{id,jdbcType=BIGINT},
            </if>
            <if test="defenseTeacherId != null">
                defense_teacher_id = #{defenseTeacherId,jdbcType=BIGINT},
            </if>
            <if test="studentId != null">
                student_id = #{studentId,jdbcType=BIGINT},
            </if>
            <if test="eduClassId != null">
                edu_class_id = #{eduClassId,jdbcType=BIGINT},
            </if>
            <if test="operateUser != null">
                operate_user = #{operateUser,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="modifyDate != null">
                modify_date = #{modifyDate,jdbcType=TIMESTAMP},
            </if>
            <if test="isDel != null">
                is_del = #{isDel,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select *
        from gp_check_teacher
        where id = #{id,jdbcType=BIGINT}
    </select>

    <select id="findPage" resultMap="BaseResultMap">
        select *
        from gp_check_teacher
    </select>


    <insert id="batchInsert" parameterType="list">
        insert into gp_check_teacher (defense_teacher_id, student_id, edu_class_id, operate_user)
        values

        <foreach collection="list" item="teacher" index="index"
                 separator=",">
            (#{teacher.defenseTeacherId,jdbcType=BIGINT},
            #{teacher.studentId,jdbcType=BIGINT},
            #{teacher.eduClassId,jdbcType=BIGINT},
            #{teacher.operateUser,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <select id="findUndistributedList" resultMap="CheckerBaseResultMap">
        select cs.id as student_id,
        cs.student_no,
        cs.name as student_name,
        clazz.name as class_name,
        gs.id as subject_id,
        gs.name as subject_name,
        ct.id as teacher_id,
        ct.name as teacher_name
        from cc_course_periode ccp
        join cc_educlass_student ces on ces.class_id = ccp.class_id and ces.is_del = 0
        join cc_student cs on ces.student_id = cs.id
        left join cc_class cc on cc.id = cs.class_id
        left join sys_office clazz on clazz.id = cc.id
        left join gp_subject_student gss on cs.id = gss.student_id and gss.status = 1
        left join gp_subject gs on gss.subject_id = gs.id and gs.is_del = 0 and gs.status = 2
        left join cc_teacher ct on gs.teacher_id = ct.id
        where cs.id not in (select gct.student_id from gp_check_teacher gct)
        and ccp.period_date = #{grade}
        and ccp.school_id = #{schoolId}
        and ccp.course_type=1

        <if test="studentName != null and studentName != ''">
            and cs.name like CONCAT('%',#{studentName},'%')
        </if>

        <if test="studentNo != null and studentNo != ''">
            and cs.student_no = #{studentNo}
        </if>

        <if test="className != null and className != ''">
            and clazz.name like CONCAT('%',#{className},'%')
        </if>

    </select>

    <select id="findCountByDefenseTeacherId" resultType="long">
        select count(*)
        from gp_check_teacher
        where defense_teacher_id = #{defenseTeacherId}
    </select>


    <select id="findUndistributedCount" resultType="long">
        select count(*)
        from cc_course_periode ccp
                 join cc_educlass_student ces on ces.class_id = ccp.class_id and ces.is_del = 0
                 join cc_student cs on ces.student_id = cs.id
        where cs.id not in (select gct.student_id from gp_check_teacher gct)
          and ccp.period_date = #{grade}
          and ccp.course_type=1
          and ccp.school_id = #{schoolId}
    </select>

    <select id="findDistributedList" resultMap="CheckerBaseResultMap">
        select cs.id      as student_id,
               cs.student_no,
               cs.name    as student_name,
               clazz.name as class_name,
               gs.id      as subject_id,
               gs.name    as subject_name,
               ct.id      as teacher_id,
               ct.name    as teacher_name
        from gp_check_teacher gct
                 join cc_student cs on cs.id = gct.student_id
                 left join cc_class cc on cc.id = cs.class_id
                 left join sys_office clazz on clazz.id = cc.id
                 left join gp_subject_student gss on cs.id = gss.student_id and gss.status = 1
                 left join gp_subject gs on gss.subject_id = gs.id and gs.is_del = 0 and gs.status = 2
                 left join cc_teacher ct on gs.teacher_id = ct.id
        where gct.defense_teacher_id = #{defenseTeacherId}
    </select>

    <select id="findDistributedCount" resultType="long">
        select count(*)
        from gp_check_teacher gct
        where gct.defense_teacher_id = #{defenseTeacherId}
    </select>


</mapper>